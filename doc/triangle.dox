/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-triangle Your first triangle
@brief Basic rendering with builtin shaders.

@m_keywords{Triangle}

@m_footernavigation

@image html triangle.png

The Hello World of 3D graphics, rendering a single colored triangle using
OpenGL.

@m_div{m-button m-primary} <a href="http://magnum.graphics/showcase/triangle/">@m_div{m-big}Live web demo @m_enddiv @m_div{m-small} uses WebAssembly & WebGL @m_enddiv </a> @m_enddiv

For this example we will use SDL2, which is the most widely used multiplatform
windowing toolkit. Support for it is in the @ref Platform::Sdl2Application
class. We also need @ref GL::Mesh for encapsulating our triangle,
@ref GL::Buffer to store vertex data, @ref Shaders::VertexColor2D shader which
will take care of rendering and an ability to control the
@ref GL::DefaultFramebuffer.

@dontinclude triangle/TriangleExample.cpp
@skip #include
@until Shaders/

We subclass the application and next to the constructor we implement the one
single required function which is needed for rendering into the window. You can
read more about platform support and various portability tricks in
@ref platform.

@skip class TriangleExample
@until };

@note All example code is written inside the @ref Magnum namespace (or as if
    @cpp using namespace Magnum; @ce would be present) in order to avoid long
    name prefixes.

In the constructor we pass arguments to the application class. The
@ref Platform::Sdl2Application::Configuration "Configuration" configuration is
optional and allows us to set a window title and other things.

@skip TriangleExample::TriangleExample
@until {
@until {

Now we specify vertex attributes, consisting of positions and colors. For
performance reasons it is common to interleave them, so data for each vertex
are in one continuous place in memory. In this case, because we need just three
vertices, we will interleave them manually in-place. In the next tutorial we
will learn how to interleave them programatically. See @ref types for more
information about scalar and vector types used in Magnum --- one of the notable
convenience features is an ability to use a custom literal to specify
hexadecimal colors, just like you are used to from CSS and various graphics
editors.

@skip using namespace
@until };
@until };

We then create vertex buffer and fill it with data.

@skip GL::Buffer
@until setData

Now we configure the mesh. The mesh is @ref GL::MeshPrimitive::Triangles by
default, so we need to specify just vertex count and add the vertex buffer with
specified attribute locations for use with the shader. We need to describe
physical location of vertex attributes in the buffer --- zero offset from the
beginning, first the position, then the color; with no gaps in between. Because
we use a 2D shader, position is implicitly a two-component float vector and we
use three-component RGB colors (we could also say @ref Shaders::VertexColor::Color4
for RGBA).

Here we use @ref std::move() instead of just passing it by reference to make
the mesh an owner of the buffer. In this case it simplifies things for us,
otherwise we would need to ensure `buffer` exists for the whole mesh lifetime.
On the other hand, we lose the ability to modify that buffer afterwards.

@skip _mesh.
@until }
@until }
@until }

@note Setters in most Magnum classes are implemented in a way that allows
    @ref method-chaining "method chaining" --- so you don't have to write
    repeated code.

The @ref Platform::Sdl2Application::drawEvent() "drawEvent()" function will
take care of rendering the scene. We will clear color buffer of the default
framebuffer (which is also the default rendering target) and then we draw the
mesh using our shader. The context is double-buffered, so we need to swap the
buffers after drawing.

@skip TriangleExample::drawEvent
@until }

Lastly, we need a @cpp main() @ce function. The
@ref MAGNUM_SDL2APPLICATION_MAIN() "MAGNUM_APPLICATION_MAIN()" macro will
handle that conveniently for us, silently covering platform differences in the
background:

@code{.cpp}
MAGNUM_APPLICATION_MAIN(TriangleExample)
@endcode

That's all, now we can compile the whole example using CMake. First we require
the `Magnum` package with `GL`, `Shaders` and `Sdl2Application` components.
It's recommended to use also Corrade's set of compiler flags to enable
additional warnings. Then we create our executable and link to all Magnum
libraries we requested. See @ref cmake for more information.

@dontinclude triangle/CMakeLists.txt
@skip find_package
@until Magnum::Shaders)

You can now try changing vertex count, positions or colors to see how the
shader behaves. The full file content is linked below. Full source code is also
available in the
[magnum-examples GitHub repository](https://github.com/mosra/magnum-examples/tree/master/src/triangle).

-   @ref triangle/CMakeLists.txt "CMakeLists.txt"
-   @ref triangle/TriangleExample.cpp "TriangleExample.cpp"

The [ports branch](https://github.com/mosra/magnum-examples/tree/ports/src/triangle)
contains additional patches for @ref CORRADE_TARGET_IOS "iOS",
@ref CORRADE_TARGET_ANDROID "Android" and @ref CORRADE_TARGET_EMSCRIPTEN "Emscripten"
support that aren't present in `master` in order to keep the example code as
simple as possible.

@m_div{m-note m-success} There's also an alternative version of this example
that sidesteps the @ref Platform::Sdl2Application "Platform::Application"
wrapper classes to show that it's possible to hook into OpenGL context and
window surface provided by a third party library. See @ref examples-triangle-plain-glfw
for details.
@m_enddiv

@example triangle/CMakeLists.txt @m_examplenavigation{examples-triangle,triangle/} @m_footernavigation
@example triangle/TriangleExample.cpp @m_examplenavigation{examples-triangle,triangle/} @m_footernavigation

*/
}
