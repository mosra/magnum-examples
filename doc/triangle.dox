/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
                2020, 2021, 2022, 2023, 2024
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-triangle Your First Triangle
@brief Basic rendering with builtin shaders.

@m_keywords{Triangle}

@m_footernavigation

@image html triangle.png

The Hello World of 3D graphics, rendering a single colored triangle using
OpenGL.

@m_div{m-button m-primary} <a href="https://magnum.graphics/showcase/triangle/">@m_div{m-big}Live web demo @m_enddiv @m_div{m-small} uses WebAssembly & WebGL @m_enddiv </a> @m_enddiv

Continuing from the @ref getting-started "Getting Started Guide", where we used
basically just the @ref Platform::Sdl2Application class and cleared the
@ref GL::DefaultFramebuffer, we'll now additionally need a @ref GL::Mesh for
encapsulating our triangle, a @ref GL::Buffer to store vertex data, and a
@ref Shaders::VertexColorGL2D shader which will take care of rendering.

@dontinclude triangle/TriangleExample.cpp
@skip #include
@until Shaders/

The subclassed application looks very similar, only additionally containing the
shader and a mesh instance. These are kept as class members as we'll reuse them
every time the window gets redrawn. You can read about Magnum's platform
abstractions in more detail in @ref platform.

@skip class TriangleExample
@until };

In the constructor we'll pass an optional
@ref Platform::Sdl2Application::Configuration "Configuration" parameter that
allows us to set a window title and other window-related things; similarly
there's also @ref Platform::Sdl2Application::GLConfiguration "GLConfiguration"
for OpenGL-specific options such as multisampling.

@skip TriangleExample::TriangleExample
@until {
@until {

Next we write out the mesh data, consisting of a position and color attribute,
in a counterclockwise order. While it makes little difference at the scale we
have here, a common practice is to interleave the attributes so each vertex is
a single contiguous piece of memory. To save ourselves typing, we use
hexadecimal color literals from the @ref Math::Literals namespace. See
@ref types for more information about scalar and vector types provided by
Magnum.

@skip using namespace
@until };
@until };

Onto configuring the @ref GL::Mesh. It's @ref MeshPrimitive::Triangles by
default, which already matches our need, so we only need to the vertex count to
size of the data array. Then we upload the data to a @ref GL::Buffer and
directly pass it to @ref GL::Mesh::addVertexBuffer(Buffer&&, GLintptr, const T&... attributes) "GL::Mesh::addVertexBuffer()".
This effectively makes the mesh take over the buffer instance and manage its
lifetime for us, instead of us having to ensure the buffer is kept in scope
for as long as the mesh is used.

The remaining arguments to the function are --- zero offset from the beginning
of the buffer, then first the position as the
@ref Shaders::VertexColorGL2D::Position attribute and then a three-component
@ref Shaders::VertexColorGL2D::Color3. As our data types match the types
expected by these attributes, using default constructors is sufficient. Consult
the @ref GL::Mesh documentation for more information about attribute data types
and vertex buffer layouts.

@skip _mesh.
@until }
@until }
@until }
@until }

@m_class{m-block m-success}

@par Method chaining
    Setters in most Magnum classes implement
    @ref method-chaining "method chaining", allowing you to call several
    setters in a single expression. It's taken even further in case of the application @ref Platform::Sdl2Application::Configuration "Configuration"
    above --- we form a temporary instance and pass it directly to the parent
    class constructor, without having to do the setup in a dedicated
    expression outside of the constructor call.

The @ref Platform::Sdl2Application::drawEvent() "drawEvent()" function now
performs an actual rendering after clearing the default framebuffer, and then
again swaps the buffers to make the rendering appear on the screen.

@skip TriangleExample::drawEvent
@until }

Lastly, we need a @cpp main() @ce function. It's supplied by the
@ref MAGNUM_SDL2APPLICATION_MAIN() "MAGNUM_APPLICATION_MAIN()" macro, which
will also cover any platform differences for us:

@code{.cpp}
MAGNUM_APPLICATION_MAIN(TriangleExample)
@endcode

That's all, now we can compile the whole example using CMake. Continuing from
the @ref getting-started-review "Getting Started Guide", the only addition
is finding & linking the @ref Magnum::Shaders library that's now being used as
well:

@dontinclude triangle/CMakeLists.txt
@skip find_package
@until Magnum::Shaders)

You can now try adding more triangles or changing the vertex data to see how
the shader behaves. The full file content is linked below. Full source code is
also available in the [magnum-examples GitHub repository](https://github.com/mosra/magnum-examples/tree/master/src/triangle).

-   @ref triangle/CMakeLists.txt "CMakeLists.txt"
-   @ref triangle/TriangleExample.cpp "TriangleExample.cpp"

The [ports branch](https://github.com/mosra/magnum-examples/tree/ports/src/triangle)
contains additional patches for @ref CORRADE_TARGET_IOS "iOS",
@ref CORRADE_TARGET_ANDROID "Android" and @ref CORRADE_TARGET_EMSCRIPTEN "Emscripten"
support that aren't present in `master` in order to keep the example code as
simple as possible.

@m_class{m-note m-success}

@par
    There's also an alternative version of this example that sidesteps the
    @ref Platform::Sdl2Application "Platform::Application" wrapper classes to
    show that it's possible to hook into OpenGL context and window surface
    provided by a third party library. See @ref examples-triangle-plain-glfw
    for details.

@example triangle/CMakeLists.txt @m_examplenavigation{examples-triangle,triangle/} @m_footernavigation
@example triangle/TriangleExample.cpp @m_examplenavigation{examples-triangle,triangle/} @m_footernavigation

*/
}
