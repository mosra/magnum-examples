/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
                2020, 2021, 2022, 2023, 2024
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-viewer Model Viewer
@brief Scene graph, resource management and model importing.

@m_keywords{Viewer}

@tableofcontents
@m_footernavigation

@image html viewer.png

This example shows how to load a 3D scene file provided via a command line
argument, import the scene hierarchy, meshes, materials and textures and
populate a @ref SceneGraph with it.

@m_div{m-button m-primary} <a href="https://magnum.graphics/showcase/viewer/">@m_div{m-big}Live web demo @m_enddiv @m_div{m-small} uses WebAssembly & WebGL @m_enddiv </a> @m_enddiv

Note that this example is deliberately simplified to highlight the above
features. For a full-featured model viewer and animation player see the
@ref magnum-player "magnum-player" app.

@section examples-viewer-scenegraph Scene graph

In previous examples we managed our scene manually, because there was just one
object. However, as scenes grow more complex, it's better to have them
organized somehow. Magnum @ref SceneGraph takes care of three key things:

-   parent/child object relations
-   hierarchic object transformations
-   attaching *features* to objects (drawing, animation, ...)

For a scene there is one root @ref SceneGraph::Scene object and some
@ref SceneGraph::Object instances. Each object can have a parent and maintains
a list of its children. This hierarchy is used also to simplify memory
management --- when destroying any object, all its children and features are
recursively destroyed too.

Each particular scene graph uses some transformation implementation, which
stores transformation for each object (relative to parent) and provides
convenience functions for most used transformations, like translation, rotation
and scaling. It is also possible to calculate an absolute transformation or
transformation relative to some arbitrary object in the same scene.

*Features* are added to objects to make them do something useful. The most
common feature, which will be also used in this example, is
@ref SceneGraph::Drawable. When implemented, it allows the object to be drawn
on the screen. Each drawable is part of some @ref SceneGraph::DrawableGroup and
this group can be then rendered in one shot using @ref SceneGraph::Camera. The
camera is also a feature --- it handles various projection parameters and is
attached to an object that controls its transformation in the scene.

Magnum scene graph implementation works for both 2D and 3D scenes. Their usage
is nearly the same and differs only in obvious ways (e.g. perspective
projection is not available in 2D).

See also @ref scenegraph for more detailed introduction.

@section examples-viewer-setup Setting up and initializing the scene graph

As we are importing a complete scene, we need quite a lot of things to handle
materials, meshes and textures:

@dontinclude viewer/ViewerExample.cpp
@skip #include
@until TextureData.h

For this example we will use scene graph with @ref SceneGraph::MatrixTransformation3D
as transformation implementation. It is a good default choice, if you don't
want to be limited in how you transform the objects, but on the other hand it
eats up more memory and is slightly slower than for example
@ref SceneGraph::DualQuaternionTransformation implementation. We typedef the
classes to save us more typing:

@skip typedef SceneGraph::Object
@until typedef SceneGraph::Scene

Our main class stores shader instances for rendering colored and textured
objects and all imported meshes and textures. After that, there is the scene
graph --- root scene instance, a manipulator object for easy interaction with
the scene, object holding the camera, the actual camera feature instance and a
group of all drawables in the scene.

@skip class ViewerExample
@until };
@until };

In the constructor we first parse command-line arguments using
@relativeref{Corrade,Utility::Arguments}. At the very least we need a filename
to load. Magnum itself is also able to consume command-line arguments, for
example to control DPI scaling or enable GPU validation. All of them start with
`--magnum-` and @relativeref{Corrade::Utility::Arguments,addSkippedPrefix()}
lets them get propagated to the engine without the application failing due to
an unrecognized argument name.

@skip ViewerExample::ViewerExample
@until .parse(

Then we setup the scene:

@skip _cameraObject
@until manipulator.setParent

After that, we enable depth test and face culling for correct and fast
rendering and set some shader defaults that will stay the same during the whole
time. Note that these properties are usually part of the imported material
data, but to keep the example simple we'll be only using the diffuse color and
texture properties.

@skip GL::Renderer::enable
@until setShininess
@until setShininess

@section examples-viewer-import Importing the data

For scene import we are using the @relativeref{Trade,AnySceneImporter} plugin,
which detects format based or file extension and then redirects the actual
loading to a plugin dedicated for given format. So, for example, if you open
`mesh.obj`, it'll be opened using @relativeref{Trade,ObjImporter}, if you open
`mesh.ply`, it'll go to @relativeref{Trade,StanfordImporter}, etc. Sometimes
there is more than one possible choice (glTF files in particular can be opened
using @relativeref{Trade,CgltfImporter}, @relativeref{Trade,TinyGltfImporter}
or @relativeref{Trade,AssimpImporter}) and so above we made it possible to
override the used importer plugin using the `--importer` command-line argument.
Another option is to specify the preference using
@relativeref{Corrade,PluginManager::Manager::setPreferredPlugins()}. See also
@ref file-formats for a list of supported file formats and plugins implementing
them.

We try load and instantiate the plugin and open the file, which isn't any
different from when we dealt with just images in the @ref examples-texturedquad
example:

@skip PluginManager::Manager
@until std::exit(1);

@subsection examples-viewer-import-textures Importing textures

First we import textures, if there are any. The textures are stored in an
array of @relativeref{Corrade,Containers::Optional} objects, so if importing a
texture fails, given slot is set to @relativeref{Corrade,Containers::NullOpt}
to indicate the unavailability. This is also not that different from image
loading in the @ref examples-texturedquad example, except that we first get a
@ref Trade::TextureData, which references both the image and associated texture
filtering options. For simplicity we'll import only 2D textures and ignore
GPU-compressed formats.

@skip _textures =
@until }
@until }
@until }
@until }
@until }
@until }
@until }
@until }

Note that the scene importer transparently deals with image loading for us, be
it images embedded directly in the file or referenced externally. For
flexibility, scene importers internally use @relativeref{Trade,AnyImageImporter}.
It is like the @relativeref{Trade,AnySceneImporter} we used, but for images.
For example if the scene references `image.png`, it gets opened through
@relativeref{Trade,PngImporter}, `texture.jpg` through @relativeref{Trade,JpegImporter} etc. The plugins can also alias each other, so
for example on platforms that don't have `libPNG` available, dependency-less
@relativeref{Trade,StbImageImporter} can be transparently used in place of
@relativeref{Trade,PngImporter} without changing anything in the application
code. The ultimate goal is that you can deploy a different set of plugins for
each platform but still use them in a platform-independent way, without having
complex logic for which plugins to use on which system.

@subsection examples-viewer-import-materials Importing materials

After that we import all materials. The material data are stored only
temporarily, because we'll later extract only the data we need from them.
For simplicity, we'll treat each material *as if* it was Phong by turning it
into @ref Trade::PhongMaterialData. Its convenience interfaces also provide
reasonable defaults for when the material wouldn't have the Phong attributes
we're looking for.

@skip Containers::Array<Containers::Optional<Trade::PhongMaterialData>>
@until }
@until }
@until }
@until }

@subsection examples-viewer-import-meshes Importing meshes

Next thing is loading meshes. This is easy to do with @ref MeshTools::compile()
that was introduced previously, but we additionally tell it to generate
normals if they're not present (as is sometimes the case with Stanford PLY
files) --- if we wouldn't, the mesh would render completely black.

@skip _meshes =
@until }
@until }
@until }
@until }

@subsection examples-viewer-import-scene Importing the scene

Last remaining part is to populate the actual scene. First we take care of an
edge case where a file doesn't have any scene (which is always the case for PLY
or STL files) --- we'll just load the first mesh, if it's there, and slap a
default material on it:

@skip if(importer->defaultScene
@until }
@until }

Simply put, @ref Trade::SceneData contains a set of *fields*, where each field
is a list of items describing which object has which parent, which meshes are
assigned to which objects and so on. A scene can be many things so we check
that it's 3D and contains a hierarchy with mesh references --- otherwise we
wouldn't have anything to build our scene graph from. The
@relativeref{Corrade::Utility,Fatal} utility prints a message and exits.

@skip Containers::Optional<Trade::SceneData>
@until }
@until }

Similarly as with other data we've imported so far, objects in
@ref Trade::SceneData are referenced by IDs, so we create an array to map from
IDs to actual `Object3D` instances. Here however, not all objects in the
@relativeref{Trade::SceneData,mappingBound()} may actually be present in the
scene hierarchy, some might describe other structures or belong to other
scenes, and so we instantiate only objects that have a
@ref Trade::SceneField::Parent assigned. We do that through the convenience
@relativeref{Trade::SceneData,parentsAsArray()} that converts an arbitrary
internal representation to pairs of 32-bit object ID to parent object ID
mappings:

@skip Containers::Array<Object3D*> objects
@until new Object3D

Then we go through the parent field again and set the actual parent, or parent
directly to the manipulator if it's a root object indicated with @cpp -1 @ce.
We do this in a separate pass to ensure the parent object is already allocated
by the time we pass it to @ref SceneGraph::Object::setParent():

@skip for(const Containers::Pair<UnsignedInt, Int>& parent
@until );

Next we assign transformations. Because we checked that the scene is 3D, it
implies that there's a (3D) transformation field. It could be also  represented
as separate translation/rotation/scaling components, but we want just matrices
and that's what @relativeref{Trade::SceneData,transformations3DAsArray()} will
make for us. Note that we only consider objects that are part of the hierarchy
we just created, ignoring fields referencing objects outside of it. It goes the
other way as well --- the transformation field doesn't have to be present for
all objects in the hierarchy, objects not referenced by the it will retain the
default identity transformation.

@skip for(const Containers::Pair<UnsignedInt, Matrix4>& transformation
@until }

Finally, for objects that are a part of the hierarchy and have a mesh assigned,
we add a drawable, either colored or textured depending on what's specified in
its associated material. For simplicity, only diffuse texture is considered in
this example. Here it can happen that a single object can have multiple meshes
assigned --- the @ref SceneGraph supports that natively and it'll simply result
in more than one drawable attached.

@skip for(const Containers::Pair<UnsignedInt, Containers::Pair<UnsignedInt, Int>>&
@until }
@until }
@until }
@until }
@until }
@until }
@until }
@until }

@section examples-viewer-objects Drawable objects

As explained above, all objects that want to draw something on the screen using
the scene graph do that using the @ref SceneGraph::Drawable feature. It can be
either subclassed separately or added through multiple inheritance. In this
example we'll use the former, see @ref scenegraph-features for details on all
possibilities.

The subclass stores everything needed to render either the colored or the
textured object --- reference to a shader, a mesh and a color or a texture. The
constructor takes care of passing the containing object and a drawable group to
the superclass.

@dontinclude viewer/ViewerExample.cpp
@skip class ColoredDrawable
@until };
@until };

Each drawable needs to implement the @cpp draw() @ce function. It's nothing
more than setting up shader parameters and drawing the mesh. To keep things
simple, the example uses a fixed global light position --- though it's possible
to import the light position and other properties as well, if the file has
them.

@skip void ColoredDrawable::draw
@until }
@until }
@until }
@until }
@until }

Finally, the draw event only delegates to the camera, which draws everything
in our drawable group.

@skip void ViewerExample::drawEvent
@until }

@section examples-viewer-interactivity Event handling

This example has a resizable window, for which we need to implement the
viewport event. It simply delegates the size change to GL viewport and to the
camera.

@skip void ViewerExample::viewportEvent
@until }
@until }

Lastly there is mouse handling to rotate and zoom the scene around, nothing new
to talk about.

@skip void ViewerExample::mousePressEvent
@until }
@until }
@until }
@until }
@until }
@until }

@section examples-viewer-compilation Compilation & running

Compilation is again nothing special:

@dontinclude viewer/CMakeLists.txt
@skip find_package(
@until Magnum::Trade)

Now, where to get the models and plugins to load them with? The core Magnum
repository contains a very rudimentary OBJ file loader in @ref Trade::ObjImporter "ObjImporter",
and you can try it with the [scene.obj](https://github.com/mosra/magnum-examples/raw/master/src/viewer/scene.obj)
file bundled in the example repository. For more advanced models with custom
textures and materials, @ref building-plugins "Magnum Plugins" provide
@ref Trade::TinyGltfImporter "TinyGltfImporter" that can load the
[scene.glb](https://github.com/mosra/magnum-examples/raw/master/src/viewer/scene.glb),
and there are more plugins for various other formats.

@m_class{m-block m-success}

@par Enabling model-loading plugins in your project
    If you're using the CMake subproject setup, you'll need to modify the
    top-level `CMakeLists.txt` to enable these --- expanding on what
    @ref examples-texturedquad-importers "was shown in the Textured Quad tutorial":
@par
    @code{.cmake}
    ...

    # If you want to load just basic OBJs
    set(MAGNUM_WITH_ANYIMAGEIMPORTER ON CACHE BOOL "" FORCE)
    set(MAGNUM_WITH_ANYSCENEIMPORTER ON CACHE BOOL "" FORCE)
    set(MAGNUM_WITH_OBJIMPORTER ON CACHE BOOL "" FORCE)
    add_subdirectory(magnum EXCLUDE_FROM_ALL)

    # If you want to load (textured) glTF as well
    set(MAGNUM_WITH_STBIMAGEIMPORTER ON CACHE BOOL "" FORCE)
    set(MAGNUM_WITH_TINYGLTFIMPORTER ON CACHE BOOL "" FORCE)
    add_subdirectory(magnum-plugins EXCLUDE_FROM_ALL)

    add_dependencies(magnum-viewer
        Magnum::AnyImageImporter
        Magnum::AnySceneImporter
        Magnum::ObjImporter
        MagnumPlugins::StbImageImporter
        MagnumPlugins::TinyGltfImporter)
    @endcode
@par
    If you're using packaged Magnum, all the above-mentioned plugins are
    included by default (and you don't need to do anything in CMake in order to
    use them); if you build it yourself, make sure you have the desired
    `MAGNUM_WITH_*` options enabled.

You can experiment by loading scenes of varying complexity and formats, adding
light and camera property import or supporting more than just diffuse Phong
materials. The full file content is linked below. Full source code is also
available in the [magnum-examples GitHub repository](https://github.com/mosra/magnum-examples/tree/master/src/viewer).

-   @ref viewer/CMakeLists.txt "CMakeLists.txt"
-   @ref viewer/ViewerExample.cpp "ViewerExample.cpp"
-   [scene.obj](https://github.com/mosra/magnum-examples/raw/master/src/viewer/scene.obj)
-   [scene.glb](https://github.com/mosra/magnum-examples/raw/master/src/viewer/scene.glb)

The [ports branch](https://github.com/mosra/magnum-examples/tree/ports/src/viewer)
contains additional patches for @ref CORRADE_TARGET_EMSCRIPTEN "Emscripten"
and @ref CORRADE_TARGET_ANDROID "Android" support that aren't present in
`master` in order to keep the example code as simple as possible.

@section examples-viewer-credits Credits

The bundled model is [Blender Suzanne](https://en.wikipedia.org/wiki/Blender_(software)#Suzanne). Android port was contributed by
[Patrick Werner](https://github.com/boonto).

@example viewer/CMakeLists.txt @m_examplenavigation{examples-viewer,viewer/} @m_footernavigation
@example viewer/ViewerExample.cpp @m_examplenavigation{examples-viewer,viewer/} @m_footernavigation

*/
}
