version: 2.1

executors:
  ubuntu-18_04:
    docker:
    - image: ubuntu:bionic-20220427
  # Anything below 13.4.1 (and all x86 variants) are deprecated as of June 28th
  # 2024
  xcode-13_4:
    macos:
      xcode: 13.4.1
    resource_class: macos.m1.medium.gen1
  emscripten:
    docker:
    # 2.0.27 is then the first that adds timestamps to events, which are needed
    # internally by touch events. And, compared to the main Magnum repository
    # at least, I don't want to bother with #ifdef'ing those in all examples.
    - image: emscripten/emsdk:2.0.27

commands:
  install-base-linux:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Update apt and install base packages
        # Git is needed always for cloning Corrade, Magnum etc
        command: |
          apt update
          # libidn11 needed by CMake
          apt install -y git ninja-build libidn11 << parameters.extra >>

  # TODO this might get resolved with 1.11.1:
  #   https://github.com/ninja-build/ninja/pull/1827
  #   https://github.com/ninja-build/ninja/pull/2174
  # But wouldn't it build too slow then? Heh
  cap-ninja-jobs:
    parameters:
      count:
        type: integer
        # It reports 36 cores and ninja goes with 38 currently, RAM fluctuates
        # from 3 to 70 GB.
        default: 24
    steps:
    - run:
        name: Query CPU cores, default Ninja parallelism and available RAM, cap jobs
        command: |
          nproc
          ninja --help 2>&1 | grep "N jobs in parallel" || true
          free
          echo "export NINJA_JOBS=-j<< parameters.count >>" >> $BASH_ENV

  install-base-macos:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Install base packages
        # As usual, homebrew takes five minutes to update and then explodes in
        # a spectacular way. How is this acceptable?!
        command: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake ninja << parameters.extra >>

  install-gcc-4_8:
    steps:
    - run:
        name: Install GCC 4.8
        # For some reason, CMake needs a working C compiler, so provice CC as
        # well for the case when default gcc isn't installed.
        command: |
          apt install -y g++-4.8
          echo 'export CC=gcc-4.8' >> $BASH_ENV
          echo 'export CXX=g++-4.8' >> $BASH_ENV

  install-nodejs:
    parameters:
      version:
        type: string
        default: "18"
    steps:
    - run:
        name: Install Node.js << parameters.version >>
        # cd'ing to the home directory as otherwise it'd download into
        # /root/project and a checkout would then fail because it's not empty.
        # Also emsdk forces the PATH to prefer its own nodejs, so explicitly
        # call /usr/bin/node.
        command: |
          cd ~
          curl -fsSL https://deb.nodesource.com/setup_<< parameters.version >>.x -o nodesource_setup.sh
          bash nodesource_setup.sh
          apt-get install -y nodejs
          /usr/bin/node -v

  install-cmake:
    parameters:
      version:
        type: string
      sudo:
        type: string
        default: ""
    steps:
    - run:
        name: Install CMake << parameters.version >>
        command: |
          version_short=<< parameters.version >>
          version_short="${version_short%.*}"
          << parameters.sudo >> apt install -y wget
          mkdir -p $HOME/cmake && cd $HOME/cmake
          wget -nc --no-check-certificate https://cmake.org/files/v$version_short/cmake-<< parameters.version >>-Linux-x86_64.tar.gz
          tar --strip-components=1 -xzf cmake-<< parameters.version >>-Linux-x86_64.tar.gz
          echo 'export PATH=$HOME/cmake/bin:$PATH' >> $BASH_ENV
          source $BASH_ENV
          cmake --version | grep << parameters.version >>
          ctest --version | grep << parameters.version >>

  install-imgui:
    steps:
    - run:
        name: Install ImGui
        command: |
          export IMGUI_VERSION=v1.88
          mkdir -p $HOME/imgui && cd $HOME/imgui
          wget --no-check-certificate https://github.com/ocornut/imgui/archive/$IMGUI_VERSION.tar.gz
          tar --strip-components=1 -xzf $IMGUI_VERSION.tar.gz

  build:
    parameters:
      script:
        type: string
    steps:
    - checkout
    - run:
        name: Build & test
        command: |
          if [ "$BUILD_STATIC" != "ON" ]; then export BUILD_STATIC=OFF; fi
          if [ "$BUILD_DEPRECATED" != "OFF" ]; then export BUILD_DEPRECATED=ON; fi
          if [ "$WITH_DART" != "OFF" ]; then export WITH_DART=ON; fi
          if [ "$TARGET_GLES2" == "ON" ]; then export TARGET_GLES3=OFF; fi
          if [ "$TARGET_GLES2" == "OFF" ]; then export TARGET_GLES3=ON; fi
          ./package/ci/<< parameters.script >>

jobs:
  ports-linux:
    executor: ubuntu-18_04
    environment:
      CONFIGURATION: Debug
      PLATFORM_GL_API: GLX
      WITH_BOX2D: "ON"
      # DART was disabled on Ubuntu 16.04 because of GCC 4 and 5 ABI mismatch
      # on 16.04: https://github.com/dartsim/dart/issues/967#issuecomment-469075835
      # TODO: investigate and re-enable on 18.04
      WITH_DART: "OFF"
    steps:
    - install-base-linux:
        extra: libgl1-mesa-dev libsdl2-dev libglfw3-dev libopenal-dev libbullet-dev libbox2d-dev libvulkan-dev wget
    # OOMs during compilation of random files
    # TODO revisit once deprecated includes are dropped (non-deprecated build
    # doesn't fail)
    - cap-ninja-jobs
    - install-gcc-4_8
    - install-cmake:
        version: "3.5.2"
    - install-imgui
    - build:
        script: unix-desktop.sh

  ports-linux-gles2:
    executor: ubuntu-18_04
    environment:
      CONFIGURATION: Debug
      PLATFORM_GL_API: EGL
      # STUPID yml interprets unquoted ON as a boolean
      TARGET_GLES2: "ON"
      WITH_BOX2D: "ON"
      # Disabled due to GCC 4/5 ABI mismatch, see above
      WITH_DART: "OFF"
    steps:
    - install-base-linux:
        extra: libgl1-mesa-dev libsdl2-dev libglfw3-dev libopenal-dev libbullet-dev libbox2d-dev wget
    - install-gcc-4_8
    - install-cmake:
        version: "3.5.2"
    - install-imgui
    - build:
        script: unix-desktop-gles.sh

  ports-linux-gles3:
    executor: ubuntu-18_04
    environment:
      CONFIGURATION: Debug
      PLATFORM_GL_API: EGL
      # STUPID yml interprets unquoted OFF as a boolean
      TARGET_GLES2: "OFF"
      WITH_BOX2D: "ON"
      # Disabled due to GCC 4/5 ABI mismatch, see above
      WITH_DART: "OFF"
    steps:
    - install-base-linux:
        extra: libgl1-mesa-dev libsdl2-dev libglfw3-dev libopenal-dev libbullet-dev libbox2d-dev wget
    - install-gcc-4_8
    - install-cmake:
        version: "3.5.2"
    - install-imgui
    - build:
        script: unix-desktop-gles.sh

  ports-linux-nondeprecated:
    executor: ubuntu-18_04
    environment:
      # STUPID yml interprets unquoted OFF as a boolean
      BUILD_DEPRECATED: "OFF"
      CMAKE_CXX_FLAGS: -DCORRADE_NO_ASSERT
      CONFIGURATION: Release
      PLATFORM_GL_API: GLX
      WITH_BOX2D: "ON"
      # Disabled due to GCC 4/5 ABI mismatch, see above
      WITH_DART: "OFF"
    steps:
    - install-base-linux:
        extra: libgl1-mesa-dev libsdl2-dev libglfw3-dev libopenal-dev libbullet-dev libbox2d-dev libvulkan-dev wget
    - install-gcc-4_8
    - install-cmake:
        version: "3.5.2"
    - install-imgui
    - build:
        script: unix-desktop.sh

  ports-macos:
    executor: xcode-13_4
    environment:
      CONFIGURATION: Debug
      PLATFORM_GL_API: CGL
    steps:
    - install-base-macos:
        extra: sdl2 glfw bullet dartsim wget molten-vk
    - install-imgui
    - build:
        script: unix-desktop.sh

  ports-emscripten-webgl1:
    executor: emscripten
    environment:
      # STUPID yml interprets unquoted ON as a boolean
      TARGET_GLES2: "ON"
      # emsdk forces the PATH to prefer its own nodejs, so explicitly force
      # /usr/bin/node to be used by CMake
      EXTRA_OPTS: >
        -DNODEJS_EXECUTABLE=/usr/bin/node
    steps:
    - install-base-linux:
        extra: curl
    - install-nodejs
    - install-imgui
    - build:
        script: emscripten.sh

  ports-emscripten-webgl2:
    executor: emscripten
    environment:
      # STUPID yml interprets unquoted OFF as a boolean
      TARGET_GLES2: "OFF"
      # emsdk forces the PATH to prefer its own nodejs, so explicitly force
      # /usr/bin/node to be used by CMake
      EXTRA_OPTS: >
        -DNODEJS_EXECUTABLE=/usr/bin/node
    steps:
    - install-base-linux:
        extra: curl
    - install-nodejs
    - install-imgui
    - build:
        script: emscripten.sh

  ports-ios-gles3:
    executor: xcode-13_4
    environment:
      # STUPID yml interprets unquoted ON as a boolean
      TARGET_GLES2: "OFF"
      # Yep, xcodebuild is beyond stupid and just DOESN'T build in parallel by
      # default. The default medium resource class has 4 CPUs and Ninja uses
      # -j6, so do the same for xcodebuild.
      XCODE_JOBS: 6
    steps:
    - install-base-macos:
        extra: xcbeautify
    - build:
        script: ios-simulator-gles.sh

workflows:
  version: 2
  build:
    # While there's no actual execution or data dependency between the jobs,
    # this is done in order to reduce unnecessary credit usage. The base and
    # non-deprecated Linux builds are taken as the main sanity checks. Only if
    # they pass, the rest of the jobs gets gradually executed, with further
    # dependencies especially for the macOS jobs that take the most credits.
    jobs:
    - ports-linux
    - ports-linux-nondeprecated
    - ports-linux-gles2:
        requires:
        - ports-linux
        - ports-linux-nondeprecated
    - ports-linux-gles3:
        requires:
        - ports-linux
        - ports-linux-nondeprecated
    - ports-macos:
        requires:
        - ports-linux
        - ports-linux-nondeprecated
    - ports-emscripten-webgl1:
        requires:
        - ports-linux-gles2
    - ports-emscripten-webgl2:
        requires:
        - ports-linux-gles3
    - ports-ios-gles3:
        requires:
        - ports-macos
